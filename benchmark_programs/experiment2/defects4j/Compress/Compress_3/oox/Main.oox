


class Main {
    static void original_test()
        exceptional(false) {
        OutputStream out := new OutputStream();
        ArchiveStreamFactory factory := new ArchiveStreamFactory();
        int dummy_name := -1;

        int zip := StringConstants.zip();
        ArchiveOutputStream aos1 := factory.createArchiveOutputStream(zip, out);
        ZipArchiveEntry dummy := new ZipArchiveEntry(dummy_name);
        aos1.putArchiveEntry(dummy);
        try {
            aos1.finish();
            assert false;
        } catch {
            // Exception expected;
        }

        int jar := StringConstants.jar();
        aos1 := factory.createArchiveOutputStream(jar, out);
        JarArchiveEntry dummy1 := new JarArchiveEntry(dummy_name);
        aos1.putArchiveEntry(dummy1);
        try {
            aos1.finish();
            assert false;
        } catch {
            // Exception expected;
        }

        int ar := StringConstants.ar();
        aos1 := factory.createArchiveOutputStream(ar, out);
        ArArchiveEntry dummy2 := new ArArchiveEntry(dummy_name, 100);
        aos1.putArchiveEntry(dummy2);
        try {
            aos1.finish();
            assert false;
        } catch {
            // Exception expected;
        }


        int cpio := StringConstants.cpio();
        aos1 := factory.createArchiveOutputStream(cpio, out);
        CpioArchiveEntry dummy3 := new CpioArchiveEntry(dummy_name);
        aos1.putArchiveEntry(dummy3);
        try {
            aos1.finish();
            assert false;
        } catch {
            // Exception expected;
        }

        int tar := StringConstants.tar();
        aos1 := factory.createArchiveOutputStream(tar, out);
        TarArchiveEntry dummy4 := new TarArchiveEntry(dummy_name);
        aos1.putArchiveEntry(dummy4);
        try {
            aos1.finish();
            assert false;
        } catch {
            // Exception expected;
        }
    }

    static void test_symbolic(ArchiveStreamFactory factory, int constant, int dummy_name)
        requires(factory != null && dummy_name != 0)
        exceptional(false)
    {   
        int zip := StringConstants.zip();
        int jar := StringConstants.jar();
        int ar := StringConstants.ar();
        int cpio := StringConstants.cpio();
        int tar := StringConstants.tar();
        assume constant == zip || constant == jar || constant == ar || constant == cpio || constant == tar;

        OutputStream out := new OutputStream();

        ArchiveOutputStream aos;
        aos := factory.createArchiveOutputStream(constant, out);

        ArchiveEntry dummy;
        if (aos instanceof ZipArchiveOutputStream) {
            dummy := new ZipArchiveEntry(dummy_name);
        } 
        if (aos instanceof TarArchiveOutputStream) {
            dummy := new TarArchiveEntry(dummy_name);
        } 
        if (aos instanceof ArArchiveOutputStream) {
            dummy := new ArArchiveEntry(dummy_name, 100);
        } 
        if (aos instanceof CpioArchiveOutputStream) {
            dummy := new CpioArchiveEntry(dummy_name);
        } 
        if (aos instanceof JarArchiveOutputStream) {
            dummy := new JarArchiveEntry(dummy_name);
        }
        aos.putArchiveEntry(dummy);

        try {
            aos.finish();
            assert false;
        } catch {
            // Exception expected;
        }
    }
}