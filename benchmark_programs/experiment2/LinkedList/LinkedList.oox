//
// A linked list with a dynamic value.
//

interface Value {
    bool equals(Value other);
}

class Integer implements Value {
    int value;

    bool equals(Value other) {
        if (other instanceof Integer) {
            Integer otherInt := (Integer) other;
            int thisValue := this.value;
            int otherValue := otherInt.value;
            return thisValue == otherValue;
        }
        return false;
    }
}

class Point implements Value {
    int x;
    int y;

    bool equals(Value other) {
        if (other instanceof Point) {
            Point otherPoint := (Point) other;
            int thisX := this.x;
            int otherX := otherPoint.x;
            int thisY := this.y;
            int otherY := otherPoint.y;
            return thisX == otherX && thisY == otherY;
        }
        return false;
    }
}

class Point3 extends Point {
    int z;

    bool equals(Value other) {
        if (other instanceof Point3) {
            Point3 otherPoint := (Point3) other;
            int thisX := this.x;
            int otherX := otherPoint.x;
            int thisY := this.y;
            int otherY := otherPoint.y;
            int thisZ := this.z;
            int otherZ := otherPoint.z;
            return thisX == otherX && thisY == otherY && thisZ == otherZ;
        }
        return false;
    }
}


class Node implements Value {
    Value value ;
    Node next ;

    Node(Value[] a, int i) {
        if (i >= 0 && i < #a) {
            this.value := a[i];
            if (i + 1 < #a) {
                this.next := new Node(a, i + 1);
            }
        }
    }

    bool member(Value x) {
        Value v := this.value ;
        bool xEqualsV := x.equals(v);
        if(xEqualsV) return true ;
        else {
            Node n := this.next ;
            if (n == null) {
                return false;
            } else {
                bool b := n.member(x) ;
                return b ;
            }
        }
    }

    int length() {
        Node n := this.next ;
        if (n==null) return 1 ;
        else {
            int k := n.length() ;
            return k+1 ;
        }
    }

    bool equals(Value other) {
        if (other instanceof Node) {
            Node a := this;
            Node b := (Node) other;

            while (!(a==null && b == null)) {
                if (a == null || b == null) {
                    return false;
                }
                Value aValue := a.value;
                Value bValue := b.value;
                bool aEqualsB := aValue.equals(bValue);
                if (!aEqualsB) {
                    return false;
                }
                a := a.next;
                b := b.next;
            }
            return true;
        }
        return false;
    }
}


class Main {

    static void test(Node a, Node b) {
        bool aEqualsB := a.equals(b);
        int aLength := a.length();
        int bLength := b.length();

        assert aEqualsB ==> aLength == bLength;
    }

    static void test2(Value[] as, Value[] bs)
        requires(as != null && bs != null && #as > 0 && #bs > 0) {
        Node a := new Node(as, 0);
        Node b := new Node(bs, 0);

        bool aEqualsB := a.equals(b);
        int aLength := a.length();
        int bLength := b.length();

        assert aEqualsB ==> aLength == bLength;
    }
}