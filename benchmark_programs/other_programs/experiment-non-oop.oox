//
// Linked-list, with several methods.
//

class Node {
    Node value;
    Node next ;

    Node(Node value) {
        this.value := value;
        this.next := null;
    }

    bool member(Node x)
        exceptional(false) 
    {
        Node v := this.value ;
        if(x==v) return true ;
        else {
            Node n := this.next ;
            if (n == null) { 
                return false; 
            } else {
                bool b := n.member(x) ;
                return b ;
            }
        }
    }

    int length() {
        Node n := this.next ;
        if (n==null) return 1 ;
        else {
            int k := n.length() ;
            return k+1 ;
        }
    }

    void insert(Node node)
        requires(node != null)
    {
        Node next := this.next;
        if (next == null) {
            this.next := node;
        } else {
            next.insert(node);
        }
    }

    bool nonCyclicOk() {
        Node visitedNodesList := new Node(this);

        Node n := this.next;
        while (n != null) {
            bool hasBeenVisited := visitedNodesList.member(n);
            if (hasBeenVisited) {
                return false;
            } else {
                visitedNodesList.insert(n);
                n := n.next;
            }
        }
        return true;
    }
}


// class Node




class Main {

    

    // static void program(Node a, Node b)
    //     requires(node != null)
    //     exceptional(false)
    // {
    //     // If two linked lists have the same elements they have the same length.
    //     int lengthA := a.length();
    //     int lengthB := b.length();

    //     if (lengthA < lengthB) {
            
    //     }
    // }

    static void test(Node n) {
        bool nonCyclic := n.nonCyclicOk();
        if (nonCyclic) {
            bool memberOfItself := n.member(n);
            assert memberOfItself;
        } else {
            bool memberOfItself := n.member(n);
            // This should not necessarily be true? if a different member of the nodes n is itself?
            assert memberOfItself;
        }
    }



    static void test4(Node node, Node z) 
        requires(node != null)
        exceptional(false)
    {
        assume node != null;
        bool ok := node.member(z);
    }
}
