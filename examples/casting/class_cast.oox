// aliasmap { x: [ X, X1]}

class X {

    void f(X x) {
        X1 x1 := (X1) x;
    }
}

class X1 extends X {

    // This test should be correct, since we convert the (X1) x cast to 
    // if (x instanceof X1) {
    //    assume x instanceof X1; // removing all classes that do not inherit from X1, in this case just X from aliasmap.
    // } else {
    //    assume !(x instanceof X1); // Removing all classes that inherit from X1
    //    throw "classCastException"
    // }
    // since the cast assign statement splits up the path into two this is correct.
    static void test1(X x)
        requires(x != null)
        exceptional(true, !x instanceof X1) 
        {
        x.f(x);
    }

    static void test1a(X x)
        requires(x != null)
    {
        x.f(x);
    }

    // Will not be correct since there is an exception thrown, when x instanceof X
    // since X is not instanceof X1 the exceptional clause will fail.
    static void test1a_invalid(X x)
        requires(x != null)
        exceptional(true, x instanceof X1) 
    {
        x.f(x);
    }

    // Will not be correct since there is an exception thrown
    static void test1b_invalid(X x)
        requires(x != null)
        exceptional(false)
    {
        x.f(x);
    }
}
