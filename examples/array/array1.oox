//
// Some examples with arrays of primitives (int)
//
class Main
{
    // A combination between symbolic array and symbolic index.
    static void foo(int[] a, int i, int k)
        requires(a != null && #a > 1
                 && 0 <= i && i < #a
                 && 0 <= k && k < #a
                 && (forall elem, index : a : elem > 0)
                 )
    {
        a[0] := 1;
        int iValue := a[i];
        a[1] := iValue - 1;

        int value := a[k];
        assert value >= 0;
    }

    static void foo_invalid(int[] a, int i, int k)
        requires(a != null && #a > 1
                 && 0 <= i && i < #a
                 && 0 <= k && k < #a
                 && (forall elem, index : a : elem > 0))
    {
        a[0] := 1;
        int iValue := a[i];
        a[1] := iValue - 1;

        int value := a[k];
        assert value > 0;
    }

    // A Bubblesort algorithm.
    static int[] sort(int[] array)
        requires(array != null)
        ensures(forall v, i : retval : (forall w, j : retval : i < j ==> v <= w))
        exceptional(false)
    {
        bool sorted := false;
        while (!sorted) {
            sorted := true;
            int i := 1;
            while (i < #array) {
                int a := array[i];
                int b := array[i - 1];
                if (a < b) {
                    array[i] := b;
                    array[i - 1] := a;
                    sorted := false;
                }
                i := i + 1;
            }
        }
        return array;
    }

    static int[] sort_invalid1(int[] array)
        requires(array != null)
        ensures(forall v, i : retval : forall w, j : retval : i < j ==> v < w) // bug, should be <=
        exceptional(false)
    {
        bool sorted := false;
        while (!sorted) {
            sorted := true;
            int i := 1;
            while (i < #array) {
                int a := array[i];
                int b := array[i - 1];
                if (a < b) {
                    array[i] := b;
                    array[i - 1] := a;
                    sorted := false;
                }
                i := i + 1;
            }
        }
        return array;
    }

    // Find the maximum element in the array.
    static int max(int[] array)
        requires(array != null && #array>0)
        ensures(forall v, i : array : retval >= v)
        exceptional(false) // should not throw an exception
    {
        int i := 1;
        int max := array[0];
        while (i < #array) {
            int elem := array[i];
            if (elem > max) {
                max := elem;
            }
            i := i + 1;
        }
        return max;
    }

    static int max_invalid1(int[] array)
        requires(array != null)
        ensures(forall v, i : array : retval >= v)
        exceptional(false) // this variation can throw an exception
    {
        int i := 1;
        int max := array[0]; // this may now now throw an exception
        while (i < #array) {
            int elem := array[i];
            if (elem > max) {
                max := elem;
            }
            i := i + 1;
        }
        return max;
    }

    static int max_invalid2(int[] array)
        requires(array != null && #array>0)
        ensures(forall v, i : array : retval >= v)
        exceptional(false)
    {
        int i := 1;
        int max := array[0];
        while (i < #array) {
            int elem := array[i];
            if (elem > max) {
                max := elem;
            }
            i := i + 1;
        }
        return max-1 ; // this will violate the post-cond
    }

    static int exists_valid(bool[] array, int i)
        requires(array != null && #array>0 && i >= 0 && i < #array)
        ensures(exists v, _i : array : v == true)
        exceptional(false)
    {
        array[i] := true;
    }

    static int exists_invalid1(bool[] array, int i)
        requires(array != null && #array==1 && i >= 0 && i < #array)
        ensures(exists v, pi : array : v == true)
        exceptional(false)
    {
        int j := 0;

        while (j < #array) {
            array[j] := false;
            break;
        }
    }

    // Should be invalid because we assign all values in array to false
    // The ensures asserts that at least one must be true.
    static int exists_invalid2(bool[] array, int i)
        requires(array != null && #array>0 && i >= 0 && i < #array)
        ensures(exists v, pi : array : v == true)
        exceptional(false)
    {
        int j := 0;

        while (j < #array) {
            array[j] := false;
            j := j + 1;
        }
    }

//    static int two_d_arrays(bool[][] array, int i)
//        requires(#array == 2 )
//        exceptional(false)
//    {
//        bool[] a1 := array[0];
//        assume a1 != null;
//        assume #a1 == 3;
//        a1[0] := true;
//    }

    static void array_creation1()
        ensures(forall v, _i : array : v == 0) {
        int[] array := new int[5];
    }

    static int[] array_creation2()
        ensures(forall v, pi : retval : v == 0) {
        int[] array := new int[5];
        return array;
    }

    static void array_creation_invalid()
        ensures(forall v, _i : array : v == 0) {
        int[] array := new int[5];

        array[3] := 1;
    }
}
