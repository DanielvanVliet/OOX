interface Eater {
  void eat();
}

interface Animal extends Eater {
  void animalSound() { assert false; }
}

interface Sleeper {
  void sleep() { assert false; }
}

class Pig implements Animal, Sleeper, Eater {
  bool hasMadeSound;
  bool hasSlept;
  bool hasEaten;

  Pig() {}

  void animalSound() {
    this.hasMadeSound := true;
  }

  void sleep() {
    this.hasSlept := true;
  }

  void eat() {
    this.hasEaten := true;
  }
}

class Dog implements Eater {
  void eat() {
    assert false;
  }
}

class Main {
  static void main() {
    Pig myPig := new Pig();  // Create a Pig object

    bool hasMadeSound := myPig.hasMadeSound;
    bool hasSlept := myPig.hasSlept;
    bool hasEaten := myPig.hasEaten;

    assert hasMadeSound == false && hasSlept == false && hasEaten == false;

    myPig.animalSound();
    myPig.eat();
    myPig.sleep();

    bool hasMadeSound := myPig.hasMadeSound;
    bool hasSlept := myPig.hasSlept;
    bool hasEaten := myPig.hasEaten;

    assert hasMadeSound == true && hasSlept == true && hasEaten == true;
  }

  // only Pig implements sleeper
  static void test1_valid(Sleeper sleeper) {
    sleeper.sleep();
  }

  // Both Pig and Dog implement Eater, Dog.eat() asserts to false so we expect a fail.
  static void test1_invalid(Animal animal) {
    animal.eat();
  }
}